// Copyright (C) 2009, 2010, 2011, 2012, 1013, 2014 CNRS
// Authors:  Florent Lamiraux, Thomas Moulard.
//
// This file is part of the hpp-corbaserver.
//
// This software is provided "as is" without warranty of any kind,
// either expressed or implied, including but not limited to the
// implied warranties of fitness for a particular purpose.
//
// See the COPYING file for more information.

#ifndef HPP_CORBASERVER_ROBOT_SERVER_IDL
# define HPP_CORBASERVER_ROBOT_SERVER_IDL
# include <hpp/corbaserver/common.idl>

module hpp
{
  module corbaserver {
  /// Array of joint bounds.in order [v1_min,v1_max,v2_min,v2_max,...].
  typedef sequence<double> jointBoundSeq;

  /// Creation of a device, joints and bodies.
  interface Robot {
    ///  Load robot model
    ///
    /// \param robotName Name of the robot that is constructed,
    /// \param rootJointType type of root joint among "anchor", "freeflyer",
    /// "planar",
    /// \param packageName Name of the ROS package containing the model,
    /// \param modelName Name of the package containing the model
    /// \param urdfSuffix suffix for urdf file,
    ///
    /// The ros url are built as follows:
    /// "package://${packageName}/urdf/${modelName}${urdfSuffix}.urdf"
    /// "package://${packageName}/srdf/${modelName}${srdfSuffix}.srdf"
    ///
    void loadRobotModel (in string robotName, in string rootJointType,
			 in string packageName, in string modelName,
			 in string urdfSuffix, in string srdfSuffix)
      raises (Error);

    ///  Load humanoid robot model
    ///
    /// \param robotName Name of the robot that is constructed,
    /// \param rootJointType type of root joint among "anchor", "freeflyer",
    /// "planar",
    /// \param packageName Name of the ROS package containing the model,
    /// \param modelName Name of the package containing the model
    /// \param urdfSuffix suffix for urdf file,
    ///
    /// The ros url are built as follows:
    /// "package://${packageName}/urdf/${modelName}${urdfSuffix}.urdf"
    /// "package://${packageName}/srdf/${modelName}${srdfSuffix}.srdf"
    ///
    void loadHumanoidModel (in string robotName, in string rootJointType,
			    in string packageName, in string modelName,
			    in string urdfSuffix, in string srdfSuffix)
      raises (Error);

    /// \}

    /// \name Degrees of freedom
    /// \{

    /// Get size of configuration
    /// \return size of configuration
    short getConfigSize () raises (Error);

    /// Get size of velocity
    /// \return size of velocity
    short getNumberDof () raises (Error);

    /// \}

    /// \name Joints
    /// \{

    /// Get joint names in the same order as in the configuration
    /// \note anchor joints are not exported.
    Names_t getJointNames () raises (Error);

    /// Get all joint names including anchor joints
    Names_t getAllJointNames () raises (Error);

    /// Get child joint names including anchor joints
    Names_t getChildJointNames (in string jointName) raises (Error);

    /// Get configuration of a joint in robot configuration
    ///
    /// \param jointName name of the joint,
    /// \return the segment of the robot current configuration correponding to
    ///         the joint.
    floatSeq getJointConfig(in string jointName) raises (Error);

    /// Set configuration of a joint in robot configuration
    ///
    /// \param jointName name of the joint,
    /// \param config Configuration of the joint.
    ///
    /// Size of config should fit hpp::model::Joint::configSize.
    ///
    /// Modify the part of the robot current configuration
    /// correponding to the joint and recompute forward kinematics
    void setJointConfig(in string jointName, in floatSeq config) raises (Error);

    /// Integrate velocity of a joint starting from robot configuration
    ///
    /// \param jointName name of the joint,
    /// \param speed velocity vector of the joint
    ///
    /// Size of speed should fit hpp::model::Joint::numberDof.
    ///
    /// Modify the part of the robot current configuration
    /// correponding to the joint and recompute forward kinematics
    void jointIntegrate(in string jointName, in floatSeq speed) raises (Error);

    /// Get COM position
    /// \throw Error if robot is not set
    floatSeq getComPosition () raises (Error);

    /// Get joint Transformation
    /// \param jointName name of the joint
    /// \throw Error if robot is not set or it joint does not exist.
    floatSeqSeq getCurrentTransformation(in string jointName) raises (Error);

    /// Get joint position
    /// \param jointName name of the joint
    /// \throw Error if robot is not set or if joint does not exist.
    Transform_ getJointPosition (in string jointName) raises (Error);

    /// Get the initial joint position (when config parameter corresponds to the identity)
    /// \param jointName name of the joint
    /// \throw Error if robot is not set or if joint does not exist.
    Transform_ getJointPositionInParentFrame (in string jointName) raises (Error);

    /// Get position of root joint in world frame
    /// \return constant position of the root joint in world frame in
    ///         initial configuration.
    Transform_ getRootJointPosition () raises (Error);

    /// Set position of root joint in world frame
    /// \param position constant position of the root joint in world frame in
    ///        initial configuration.
    void setRootJointPosition (in Transform_ position) raises (Error);

    /// Set the static position of joint WRT its parent
    /// \param position constant position of the joint
    void setJointPositionInParentFrame (in string jointName, in Transform_ position)
      raises (Error);

    /// Get joint number degrees of freedom
    /// \param jointName name of the joint
    /// \throw Error if robot is not set or if joint does not exist.
    short getJointNumberDof (in string jointName) raises (Error);

    /// Get joint number config size
    /// \param jointName name of the joint
    /// \throw Error if robot is not set or if joint does not exist.
    short getJointConfigSize (in string jointName) raises (Error);

    ///  set a bound for the joint

    /// \param jointName name of the joint
    /// \param inJointBound sequence of joint dof bounds in order
    ///        [v0_min,v0_max,v1_min,v1_max,...].
    /// \li If vi_min > vi_max, dof of rank i is not bounded.
    /// \li If size of sequence is different from twice the number of dofs,
    ///     raise error.
    /// \note The roadmap must be reset after all the joints bounds has been set.
    ///       See Problem::resetRoadmap
    void setJointBounds(in string jointName,
			in jointBoundSeq inJointBound)
      raises (Error);
    jointBoundSeq getJointBounds(in string jointName) raises (Error);

    /// Get link position in world frame
    ///
    /// Joints are oriented in a different way as in urdf standard since
    /// rotation and uni-dimensional translation joints act around or along
    /// their x-axis. This method returns the current position of the urdf link
    /// in world frame.
    ///
    /// \param jointName name of the joint
    /// \return position of the link in world frame.
    Transform_ getLinkPosition (in string jointName) raises (Error);

    /// Get link name
    ///
    /// \param jointName name of the joint,
    /// \return name of the link.
    string getLinkName (in string jointName) raises (Error);

    /// \}

    /// \name Extra configuration space
    /// \{

    /// Set dimension of the extra configuration space
    ///
    /// \param dimension dimension
    /// \sa hpp::model::ExtraConfigSpace
    void setDimensionExtraConfigSpace (in unsigned long dimension)
      raises (Error);

    /// Get the dimension of the extra configuration space
    ///
    /// \sa hpp::model::ExtraConfigSpace
    short getDimensionExtraConfigSpace ()
      raises (Error);

    /// Set bounds of extra configuration variables
    /// \param inJointBound sequence of joint dof bounds in order
    ///        [v0_min,v0_max,v1_min,v1_max,...].
    /// \li If vi_min > vi_max, dof of rank i is not bounded.
    /// \li If size of sequence is different from twice the number of dofs,
    ///     raise error.
    void setExtraConfigSpaceBounds (in jointBoundSeq bounds) raises (Error);

    /// \}

    /// \name Configuration
    /// \{

    /// Get current configuration
    /// \return dofArray Array of degrees of freedom.
    floatSeq getCurrentConfig() raises (Error);

    /// Shoot random configuration
    /// \return dofArray Array of degrees of freedom.
    floatSeq shootRandomConfig() raises (Error);

    /// Set current configuration of specified robot,
    /// \param dofArray Array of degrees of freedom /
    void setCurrentConfig(in floatSeq dofArray) raises (Error);

    /// \}

    /// \name Bodies
    /// \{

    ///  Get the list of objects attached to a joint.
    /// \param inJointName name of the joint.
    /// \return list of names of CollisionObject attached to the body.
    Names_t getJointInnerObjects (in string jointName) raises (Error);


    ///  Get list of collision objects tested with the body attached to a joint
    /// \param inJointName name of the joint.
    /// \return list of names of CollisionObject
    Names_t getJointOuterObjects (in string jointName) raises (Error);

    /// Get the position of an object of the robot
    ///
    /// \param objectName name of the object.
    /// \retval cfg Position of the obstacle.
    /// \throw Error.
    void getObjectPosition (in string objectName, out Transform_ cfg)
      raises (Error);

    /// \}

    /// \name Collision checking and distance computation
    /// \{

    /// Test the validity of a configuration
    ///
    /// Check whether current configuration of robot is valid by calling
    /// hpp::core::ConfigValidations object stored in Problem.
    /// \retval validity whether configuration is valid
    /// \retval report the reason why the config is not valid.
    void isConfigValid (in floatSeq dofArray, out boolean validity,
			out string report) raises (Error);


    /// Compute distances between bodies and obstacles
    ///
    /// \retval distances list of distances,
    /// \retval innerObjects names of the objects belonging to a body
    /// \retval outerObjects names of the objects tested with inner objects,
    /// \retval innerPoints closest points on the body,
    /// \retval outerPoints closest points on the obstacles
    /// \note outer objects for a body can also be inner objects of another
    /// body.
    void distancesToCollision (out floatSeq distances,
			       out Names_t innerObjects,
			       out Names_t outerObjects,
			       out floatSeqSeq innerPoints,
			       out floatSeqSeq outerPoints) raises (Error);

    /// \}

    /// \name Mass and inertia
    /// \{

    /// Get mass of robot
    double getMass () raises (Error);

    /// Get position of center of mass
    floatSeq getCenterOfMass () raises (Error);

    /// Get Jacobian of the center of mass
    floatSeqSeq getJacobianCenterOfMass () raises (Error);

    /// \}

    /// \name Create and register robot
    /// \{

    /// Create an empty device and store it temporarily
    /// \param robotName name of the robot.
    ///  Fails if another robot is already in construction.
    void createRobot(in string robotName) raises (Error);

    /// Create a new joint
    /// \param jointName name of the joint,
    /// \param jointType among ["anchor", "SO3", "bounded-rotation",
    ///                         "unbounded-rotation", "translation",
    ///                         "translation2", "translation3"]
    /// \param pos initial position of the joint
    /// \param joinBounds bounds of the joint. See setJointBounds for details.
    void createJoint(in string jointName, in string jointType,
		     in Transform_ pos, in jointBoundSeq jointBounds)
      raises (Error);

    ///  Add a child joint to a joint.
    /// \param inParentName name of the joint to which a child is added.
    /// \param inChildName name of the child joint added to the previous one.
    /// \throw Error.
    void addJoint(in string inParentName, in string inChildName)
      raises (Error);

    /// Add a robot to the ProblemSolver
    /// \throw Error.
    void setRobot (in string inRobotName) raises (Error);

    ///  Set a joint as root joint to a robot.
    /// \param inRobotName name of the robot (ChppDevice).
    /// \param inJointName name of the joint.
    void setRobotRootJoint(in string inRobotName, in string inJointName)
      raises (Error);

    ///  create an empty polyhedron.
    /// \param inPolyName name of the polyhedron.
    /// \throw Error.
    void createPolyhedron(in string inPolyName) raises (Error);

    ///  Create a box
    /// \param name name of the box
    /// \param x, y, z Size of the box
    void createBox (in string name, in double x, in double y, in double z)
      raises (Error);

    ///  Create a sphere
    /// \param name name of the sphere
    /// \param radius radius of the sphere
    void createSphere (in string name, in double radius) raises (Error);

    ///  Add a point to a polyhedron
    /// \param inPolyName the name of the polyhedron.
    /// \param x coordinate of the point.
    /// \param y coordinate of the point.
    /// \param z coordinate of the point.
    /// \return rank of point in polyhedron
    short addPoint(in string inPolyName, in double x, in double y, in double z)
      raises (Error);

    ///  Add a point to a polyhedron
    /// \param inPolyName the name of the polyhedron.
    /// \param pt1 rank of first point in polyhedron.
    /// \param pt2 rank of second point in polyhedron.
    /// \param pt3 rank of third point in polyhedron.
    /// \return rank of triangle in polyhedron
    short addTriangle(in string inPolyName, in unsigned long pt1,
		      in unsigned long pt2, in unsigned long pt3)
      raises (Error);

    ///  Attach an object to a joint.
    /// \param jointName name of the body
    /// \param objectName name of the object
    /// \param pos relative position of the polyhedron in the body
    void addObjectToJoint(in string jointName, in string objectName,
			  in Transform_ pos) raises (Error);

    /// Add an object to compute a partial COM of the robot.
    /// \param name of the partial com
    /// \param jointNames names of each ROOT of the joint trees to consider.
    /// \note Joints are added recursively, it is not possible so far to add a
    /// joint without addind all its children.
    void addPartialCom (in string comName, in Names_t jointNames)
        raises (Error);

    /// Get the name of the current robot.
    string getRobotName () raises (Error);
    /// \}

    /// Convert a direction vector to a quaternion (use Eigen::Quaterniond::FromTwoVectors with Z vector)
    /// \param u the vector director
    floatSeq quaternionFromVector(in floatSeq u)raises (Error);
  };
  };
};

#endif // HPP_CORBASERVER_ROBOT_SERVER_IDL
